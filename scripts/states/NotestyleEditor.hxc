import flixel.FlxCamera;
import flixel.FlxState;
import flixel.FlxSprite;
import flixel.FlxG;
import flixel.group.FlxTypedGroup;
import flixel.util.FlxArrayUtil;
import flixel.math.FlxMath;
import flixel.util.FlxSort;
import flixel.util.FlxTimer;

import funkin.Preferences;
import funkin.Conductor;
import funkin.save.Save;
import funkin.ui.MusicBeatState;
import funkin.ui.mainmenu.MainMenuState;
import funkin.ui.debug.charting.ChartEditorState;
import funkin.ui.transition.LoadingState;
import funkin.graphics.FunkinSprite;
import funkin.input.Cursor;
import funkin.audio.FunkinSound;
import funkin.util.FileUtil;
import funkin.util.DeviceUtil;
import funkin.util.ReflectUtil;
import funkin.util.Constants;
import funkin.util.GRhythmUtil;
import funkin.util.WindowUtil;
import funkin.data.notestyle.NoteStyleRegistry;
import funkin.data.song.SongNoteDataRaw;
import funkin.data.song.SongRegistry;
import funkin.play.PauseSubState;
import funkin.play.PlayState;
import funkin.play.song.Song;
import funkin.play.notes.notestyle.NoteStyle;
import funkin.play.notes.notekind.NoteKindManager;
import funkin.play.notes.NoteSplash;
import funkin.play.notes.Strumline;
import funkin.play.notes.StrumlineNote;
import funkin.play.notes.NoteHoldCover;
import funkin.play.notes.NoteSprite;
import funkin.modding.events.HitNoteScriptEvent;

import haxe.Json;
import haxe.ui.RuntimeComponentBuilder;
import haxe.ui.components.Label;
import haxe.ui.components.Button;
import haxe.ui.components.Column;
import haxe.ui.components.DropDown;
import haxe.ui.components.TextArea;
import haxe.ui.components.CheckBox;
import haxe.ui.components.TextField;
import haxe.ui.components.ColorPicker;
import haxe.ui.components.NumberStepper;
import haxe.ui.components.pickers.MenuItemPicker;

import haxe.ui.containers.Box;
import haxe.ui.containers.HBox;
import haxe.ui.containers.VBox;
import haxe.ui.containers.Header;
import haxe.ui.containers.TabView;
import haxe.ui.containers.ListView;
import haxe.ui.containers.TableView;
import haxe.ui.containers.TableView;
import haxe.ui.containers.ScrollView;
import haxe.ui.containers.HorizontalSplitter;
import haxe.ui.containers.menus.Menu;
import haxe.ui.containers.menus.MenuBar;
import haxe.ui.containers.menus.MenuItem;
import haxe.ui.containers.menus.MenuCheckBox;
import haxe.ui.containers.menus.MenuOptionBox;
import haxe.ui.containers.menus.MenuSeparator;
import haxe.ui.containers.dialogs.Dialog;
import haxe.ui.containers.dialogs.MessageBox;
import haxe.ui.containers.windows.Window;
import haxe.ui.containers.windows.WindowManager;

import haxe.ui.notifications.NotificationManager;
import haxe.ui.notifications.NotificationType;
import haxe.io.Bytes;

class NotestyleEditor extends MusicBeatState
{
    var windowManager = new WindowManager();
    var notificationManager = new NotificationManager();

    var testStrumline:Strumline;
    var currentNoteStyleData:NoteStyle;

    var options = new NotestyleEditorSettings();

    // menubar
    var menuBar:MenuBar;
    var menubarItemNewNotestyle:MenuItem;
    var menubarItemSaveNotestyle:MenuItem;
    var menubarItemExit:MenuItem;
    var menubarItemTestNotestyle:MenuCheckBox;
    var menubarItemTestNotestyleHold:MenuCheckBox;
    var menubarItemUserGuide:MenuItem;

    // windows
    var notestyleDataWindow:Window;
    var notestyleNoteDataWindow:Window;
    var notestyleHoldNoteDataWindow:Window;
    var notestyleStrumlineNoteDataWindow:Window;
    var userGuideWindow:Window;
    var preferenceWindow:Window;

    // notestyleDataWindow UI
    var notestyleDropdown:DropDown;
    var notestyleName:TextField;
    var notestyleArtist:TextField;
    var notestyleFallback:DropDown;
    var openNoteEditorButton:Button;
    var openHoldNoteEditorButton:Button;
    var openStrumlineEditorButton:Button;
    var openSplashCoverEditorButton:Button;

    // notestyleStrumlineNoteDataWindow UI
    var notestyleStrumlineNoteDropdown:DropDown;
    var strumlineNoteDataFields:HBox;

    var _lastDirection:Int = 0;
    var isTesting:Bool = false;
    var msPerBeat:Float = 60000 / 100;

    public function new()
    {
        super('NotestyleEditor');
    }

    function create():Void
    {
        super.create();

        var chartEditor = new ChartEditorState();

        FunkinSound.playMusic(options.data.editorSong.id, {startingVolume: 0, overrideExisting: true, restartTrack: false, persist: true, loop: true});
        FlxG.sound.music.fadeIn(0.5, 0, 1);

        WindowUtil.setWindowTitle("Friday Night Funkin' - anysad Notestyle Editor");

        _lastDirection = 0;
        msPerBeat = 60000 / get_conductorInUse().bpm;

        var bg = new FunkinSprite(0, 0).loadGraphic(Paths.image('menuDesat'));
		bg.scrollFactor.set(0, 0);
		bg.setGraphicSize(FlxG.width, FlxG.height);
		bg.updateHitbox();
		bg.screenCenter();
		bg.alpha = 0.25;
		add(bg);

        Cursor.show();

        if (testStrumline != null)
        {
            testStrumline.destroy();
            remove(testStrumline);
        }

        var style = new NoteStyle('funkin');
        currentNoteStyleData = style;
        testStrumline = new Strumline(currentNoteStyleData);
        testStrumline.screenCenter();
        testStrumline.y = Preferences.downscroll ? FlxG.height - testStrumline.height - Constants.STRUMLINE_Y_OFFSET - currentNoteStyleData.getStrumlineOffsets()[1] : Constants.STRUMLINE_Y_OFFSET + 40;
        testStrumline.isDownscroll = Preferences.downscroll;
        testStrumline.scrollFactor.set(0, 0);
        add(testStrumline);

        testStrumline.clean();
        testStrumline.noteData = [];
        testStrumline.nextNoteIndex = 0;

        menuBar = RuntimeComponentBuilder.build(Paths.ui('notestyle-editor/menubar'));
        add(menuBar);

        menubarItemTestNotestyle = menuBar.findComponent('menubarItemTestNotestyle');
        menubarItemTestNotestyle.onChange = (event) -> {
            _lastDirection = 0;

            testStrumline.clean();
            testStrumline.noteData = [];
            testStrumline.nextNoteIndex = 0;

            if (menubarItemTestNotestyle.selected) isTesting = true;
            else isTesting = false;
        }

        menubarItemTestNotestyleHold = menuBar.findComponent('menubarItemTestNotestyleHold');

        openNotestyleData();
        // openNotestyleNoteData();
        // openNotestyleHoldNoteData();
        openNotestyleStrumlineNoteData();

        // var songMetadata = SongRegistry.instance.parseMusicData(options.data.editorSong.id);
        // trace(songMetadata);
        // trace(songMetadata.timeChanges);
        // trace(songMetadata.timeChanges[0].bpm);
    }

    function update(elapsed:Float):Void
    {
        super.update(elapsed);
        get_conductorInUse().update();

        handleKeybinds();

        processNotes();
    }

    function beatHit()
    {
        super.beatHit();
        
        if (isTesting)
        {
            var data:SongNoteDataRaw = new SongNoteDataRaw((get_conductorInUse().currentBeat + 4) * msPerBeat, _lastDirection, menubarItemTestNotestyleHold.selected ? 600 : 0, null, null);
            testStrumline.addNoteData(data, false);
            _lastDirection = (_lastDirection + 1) % 4;
        }
    }

    function handleKeybinds():Void
    {
        if (pressingControl() && FlxG.keys.justPressed.Q) FlxG.switchState(() -> new MainMenuState());
        if (FlxG.keys.justPressed.F1) openUserGuide();
        if (FlxG.keys.justPressed.F6) openPreferences();
        // if (FlxG.keys.justPressed.T)
        // {
        //     var noteAssetPath = currentNoteStyleData._data.assets.note.assetPath;
        //     var image = Paths.image(Paths.stripLibrary(noteAssetPath), currentNoteStyleData.getAssetLibrary(noteAssetPath));
        //     if (currentNoteStyleData._data.assets.note.assetPath == "shared:notes")
        //     {
        //         currentNoteStyleData._data.assets.note.assetPath = "week6:weeb/pixelUI/arrows-pixels";
        //     }
        //     else if (currentNoteStyleData._data.assets.note.assetPath == "week6:weeb/pixelUI/arrows-pixels")
        //     {
        //         currentNoteStyleData._data.assets.note.assetPath = "shared:notes";
        //     }

        //     updateRegularNotes(testStrumline, currentNoteStyleData);
        // }
    }

    function openNotestyleData():Void
    {
        if (notestyleDataWindow == null || !notestyleDataWindow.visible)
        {
            notestyleDataWindow = RuntimeComponentBuilder.build(Paths.ui('notestyle-editor/windows/notestyleDataWindow'));
            notestyleDataWindow.windowManager = windowManager;
            add(notestyleDataWindow);

            notestyleDataWindow.x = 15;
            notestyleDataWindow.y = 45;
        }
        else windowManager.closeWindow(notestyleDataWindow);
    }

    function openNotestyleNoteData():Void
    {
        if (notestyleNoteDataWindow == null || !notestyleNoteDataWindow.visible)
        {
            notestyleNoteDataWindow = RuntimeComponentBuilder.build(Paths.ui('notestyle-editor/windows/notestyleNoteDataWindow'));
            notestyleNoteDataWindow.windowManager = windowManager;
            add(notestyleNoteDataWindow);

            notestyleNoteDataWindow.x = 15;
            notestyleNoteDataWindow.y = 305;
        }
        else windowManager.closeWindow(notestyleNoteDataWindow);
    }

    function openNotestyleHoldNoteData():Void
    {
        if (notestyleHoldNoteDataWindow == null || !notestyleHoldNoteDataWindow.visible)
        {
            notestyleHoldNoteDataWindow = RuntimeComponentBuilder.build(Paths.ui('notestyle-editor/windows/notestyleHoldNoteDataWindow'));
            notestyleHoldNoteDataWindow.windowManager = windowManager;
            add(notestyleHoldNoteDataWindow);

            notestyleHoldNoteDataWindow.x = 15;
            notestyleHoldNoteDataWindow.y = 550;
        }
        else windowManager.closeWindow(notestyleHoldNoteDataWindow);
    }

    function openNotestyleStrumlineNoteData():Void
    {
        if (notestyleStrumlineNoteDataWindow == null || !notestyleStrumlineNoteDataWindow.visible)
        {
            notestyleStrumlineNoteDataWindow = RuntimeComponentBuilder.build(Paths.ui('notestyle-editor/windows/notestyleStrumlineDataWindow'));
            notestyleStrumlineNoteDataWindow.windowManager = windowManager;
            add(notestyleStrumlineNoteDataWindow);

            notestyleStrumlineNoteDataWindow.x = FlxG.width - notestyleStrumlineNoteDataWindow.width - 15;
            notestyleStrumlineNoteDataWindow.y = 45;

            trace(ReflectUtil.field(currentNoteStyleData._data.assets.noteStrumline.data, 'leftStatic'));

            notestyleStrumlineNoteDropdown = notestyleStrumlineNoteDataWindow.findComponent('notestyleStrumlineNoteDropdown');
            strumlineNoteDataFields = notestyleStrumlineNoteDataWindow.findComponent('strumlineNoteDataFields');
            var prevSelectedID = '';

            notestyleStrumlineNoteDropdown.onChange = () ->
            {
                var selected = notestyleStrumlineNoteDropdown.selectedItem;
                if (selected == null) return;

                var fieldId:String = selected.id;
                trace(fieldId);
                if (fieldId == null || fieldId == '') return;

                var existing = strumlineNoteDataFields.findComponent(prevSelectedID);
                if (existing != null) strumlineNoteDataFields.removeComponent(existing);

                var fieldData = ReflectUtil.field(currentNoteStyleData._data.assets.noteStrumline.data, fieldId);
                prevSelectedID = fieldId;

                var textField = new TextField();
                textField.id = fieldId;
                textField.text = fieldData.prefix;
                textField.percentWidth = 100;
                textField.placeholder = 'Prefix for $fieldId';

                strumlineNoteDataFields.addComponent(textField);
            }
        }
    }

    function openUserGuide():Void
    {
        if (userGuideWindow == null || !userGuideWindow.visible)
        {
            userGuideWindow = RuntimeComponentBuilder.build(Paths.ui('notestyle-editor/dialogs/user-guide'));
            userGuideWindow.windowManager = windowManager;
            userGuideWindow.screenCenter();
            add(userGuideWindow);
        }
        else windowManager.closeWindow(userGuideWindow);
    }

    function openPreferences():Void
    {
        if (preferenceWindow == null || !preferenceWindow.visible)
        {
            preferenceWindow = RuntimeComponentBuilder.build(Paths.ui('notestyle-editor/dialogs/preferences'));
            preferenceWindow.windowManager = windowManager;
            preferenceWindow.screenCenter();
            add(preferenceWindow);
        }
        else windowManager.closeWindow(preferenceWindow);
    }

    function pressingControl():Bool
    {
        return FlxG.keys.pressed.CONTROL || FlxG.keys.pressed.WINDOWS;
    }

    function processNotes():Void
    {
        if (testStrumline?.notes?.members == null) return;

        for (note in testStrumline.notes.members)
        {
            if (note == null) continue;
            var r = GRhythmUtil.processWindow(note, false);
            if (r.botplayHit)
            {
                var event:NoteScriptEvent = new HitNoteScriptEvent(note, 0.0, 0, 'perfect', false, 0);

                // Command the opponent to hit the note on time.
                // NOTE: This is what handles the strumline and cleaning up the note itself!
                testStrumline.hitNote(note, true);
                testStrumline.playNoteSplash(note.noteData.getDirection());

                if (note.holdNoteSprite != null) testStrumline.playNoteHoldCover(note.holdNoteSprite);
            }
        }
    }

    function updateStrumlineNotes(strumline:Strumline, noteStyle:NoteStyle):Void
    {
        strumline.noteStyle = noteStyle;

		for (i in 0...Strumline.KEY_COUNT)
        {
			strumline.strumlineNotes.members[i].kill();
			strumline.strumlineNotes.remove(strumline.strumlineNotes.members[i]);

			var child:StrumlineNote = new StrumlineNote(noteStyle, strumline.isPlayer, Strumline.DIRECTIONS[i]);
			child.x = strumline.getXPos(Strumline.DIRECTIONS[i]);
			child.x += Strumline.INITIAL_OFFSET;
			child.y = 0;

			noteStyle.applyStrumlineOffsets(child);
			strumline.strumlineNotes.add(child);
		}
    }

    function updateRegularNotes(strumline:Strumline, noteStyle:NoteStyle):Void
    {
        strumline.noteStyle = noteStyle;
		strumline.noteSplashes.clear();
        noteStyle.noteFrames = null; // Clear cache

        for (note in strumline.notes.members)
        {
            if (note == null) continue;
            note.setupNoteGraphic(noteStyle);
            note.playNoteAnimation(note.noteData.getDirection());

            note.x = strumline.x;
            note.x += strumline.getXPos(Strumline.DIRECTIONS[note.noteData.getDirection() % Strumline.KEY_COUNT]);
            note.x -= (note.width - Strumline.STRUMLINE_SIZE) / 2;
            note.x -= 2.0;
        }
    }

    function updateHoldNotes(strumline:Strumline, noteStyle:NoteStyle):Void
    {
        strumline.noteStyle = noteStyle;
		strumline.noteHoldCovers.clear();

        for (note in strumline.notes)
        {
            if (note.get_isHoldNote())
            {
                note.holdNoteSprite.setupHoldNoteGraphic(noteStyle);
                note.holdNoteSprite.noteStyleOffsets = noteStyle.getHoldNoteOffsets();
                note.holdNoteSprite.graphicWidth = note.holdNoteSprite.graphic.width / 8 * note.holdNoteSprite.zoom;
                note.holdNoteSprite.graphicHeight = note.holdNoteSprite.sustainLength * Constants.PIXELS_PER_MS * strumline?.scrollSpeed ?? 1.0;

                note.holdNoteSprite.updateHitbox();
                note.holdNoteSprite.updateClipping();
                note.holdNoteSprite.updateColorTransform();

                note.holdNoteSprite.x = strumline.x;
                note.holdNoteSprite.x += strumline.getXPos(Strumline.DIRECTIONS[note.noteData.getDirection() % Strumline.KEY_COUNT]);
                note.holdNoteSprite.x += Strumline.STRUMLINE_SIZE / 2;
                note.holdNoteSprite.x -= note.holdNoteSprite.graphicWidth / 2;

                if (note.holdNoteSprite.hitNote) strumline.playNoteHoldCover(note.holdNoteSprite);
            }
        }
    }

    function doesFileExist(filePath:String):Bool
    {
        return Assets.exists(filePath);
    }

    function destroy()
    {
        super.destroy();
        WindowUtil.setWindowTitle("Friday Night Funkin'");
        Save.instance.flush();
    }
}